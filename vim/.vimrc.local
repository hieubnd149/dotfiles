" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" change vim cursor in different modes
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=1\x7"

" vim cursor for tmux
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"

map <C-o> :NERDTreeToggle<CR>

"Set encoding for script
scriptencoding utf-8

"Show current line of cursor
set cursorline

"Let vim set terminal title
set title

set splitright
set formatoptions=tcqronj

"========================================================
" ALE configuration
" Enable completion where available.
let g:ale_completion_enabled = 1

" Set this variable to 1 to fix files when you save them.
let g:ale_lint_on_save = 1

let g:ale_fixers = {
      \   'html': ['tidy'],
      \   'javascript': ['prettier-eslint'],
      \   'json': ['jq'],
      \   'ruby': ['rubocop'],
      \}

let g:ale_linters = {
      \   'html': ['tidy'],
      \   'javascript': ['eslint'],
      \   'json': ['jsonlint'],
      \   'ruby': ['rubocop'],
      \   'vim': ['vint'],
      \}

" Configure signs.
let g:ale_sign_error   = '✘'
let g:ale_sign_warning = ''
" let g:ale_sign_warning = '⚠'
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow

let g:ale_html_tidy_options = '-q -i --show-errors 0'
let g:ale_json_jq_options = '--indent 2'

nnoremap <leader>a :ALEFix<CR>
map <C-a> :ALEToggle<CR>

let g:ale_completion_enabled = 1

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
let g:ackprg = 'ag --nogroup --nocolor --column'
nnoremap \ :Ack<SPACE>

" Map keyboard for Vim Tab /vim-buffet
noremap <Tab> :bn<CR>
noremap <S-Tab> :bp<CR>
noremap <Leader><Tab> :Bw<CR>
noremap <Leader><S-Tab> :Bw!<CR>
noremap <C-t> :tabnew split<CR>
" Vim-buffet colors
function! g:BuffetSetCustomColors()
    hi! BuffetCurrentBuffer cterm=NONE ctermbg=5 ctermfg=8 guibg=#00FF00 guifg=#000000
endfunction
let g:buffet_powerline_separators = 1
let g:buffet_tab_icon = "\uf00a"
let g:buffet_left_trunc_icon = "\uf0a8"
let g:buffet_right_trunc_icon = "\uf0a9"

""""""""""""""""""""""""""""""""""""""""""""""""
"""""" Vim configuration for omniautocompletion
""""""""""""""""""""""""""""""""""""""""""""""""
" jfiletype plugin on

" Enable omni for all types and auto set it
" [Recomended]
" set omnifunc=syntaxcomplete#Complete

" Enable omni completion per file.
"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" jset completeopt=noinsert,menuone
" jlet g:rubycomplete_buffer_loading=1
" jlet g:rubycomplete_classes_in_global=1
" jlet g:rubycomplete_rails=0
" jlet g:loaded_sql_completion=0
" jlet g:omni_sql_no_default_maps=1
" Default keys
" let g:auto_omnicomplete_key =
"            \ 'a b c d e f g h i j k l m n o p q r s t u v w x y z ' .
"            \ 'A B C D E F G H I J K L M N O P Q R S T U V W X Y Z'

"""""""""""""""""""""""""""""""""""""""""
" Configuration for indent Line plugin
"""""""""""""""""""""""""""""""""""""""""
let g:indentLine_color_term = 239
let g:indentLine_char = '|'

"""""""""""""""""""""""""""""""""""""""""
" Set vim keep 5 lines below the cursor
""""""""""""""""""""""""""""""""""""""""'
set scrolloff=5
" set so=20
nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>
nnoremap j jzz
nnoremap k kzz

" Configuration for sympyfold
let g:SimpylFold_docstring_preview = 1

"""""""""""""""""""""""""""""""""""""""
" Configuration for vim auto closetag
"""""""""""""""""""""""""""""""""""""""
" filenames like *.xml, *.html, *.xhtml, ...
" These are the file extensions where this plugin is enabled.
" let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.html.erb'

" filenames like *.xml, *.xhtml, ...
" This will make the list of non-closing tags self-closing in the specified
" files.
" let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'

" filetypes like xml, html, xhtml, ...
" These are the file types where this plugin is enabled.
" let g:closetag_filetypes = 'html,xhtml,phtml'

" filetypes like xml, xhtml, ...
" This will make the list of non-closing tags self-closing in the specified
" files.
" let g:closetag_xhtml_filetypes = 'xhtml,jsx'

" integer value [0|1]
" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will
" be closed while `<link>` won't.)
" let g:closetag_emptyTags_caseSensitive = 1

" Disables auto-close if not in a "valid" region (based on filetype)
" let g:closetag_regions = {
"     \ 'typescript.tsx': 'jsxRegion,tsxRegion',
"     \ 'javascript.jsx': 'jsxRegion',
"     \ }

" Shortcut for closing tags, default is '>'
" let g:closetag_shortcut = '>'

" Add > at current position without closing the current tag, default is ''
" let g:closetag_close_shortcut = '<leader>>'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
set mouse=nicr

" powerline special fonts
let g:airline_powerline_fonts = 1

let g:airline#extensions#tmuxline#enabled = 0

let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#fnamemod = ':t'
" let g:airline#extensions#tabline#switch_buffers_and_tabs = 1
" let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

let g:airline#extensions#tabline#formatter = 'unique_tail'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_left_sep = ''
" let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
" let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.spell = 'Ꞩ'

" set relativenumber
set smartindent
set autoindent
autocmd BufWritePre * :%s/\s\+$//e " remove trailing whitespace
let g:netrw_localrmdir='rm -r'
filetype plugin indent on

" configuration for ALE
let g:deoplete#enable_at_startup = 1
set completeopt=menu,menuone,preview,noselect,noinsert

" CTAG configuration
set tags=tags
